\hypertarget{movegeneration_8h}{}\doxysection{include/movegeneration.h File Reference}
\label{movegeneration_8h}\index{include/movegeneration.h@{include/movegeneration.h}}


File containing the definition of the functions used to generate all the pseudo legals moves in a given chess position, as well as the functions to evaluate checks.  


{\ttfamily \#include \char`\"{}position.\+h\char`\"{}}\newline
Include dependency graph for movegeneration.\+h\+:
% FIG 0
\doxysubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_ad215d82453db4fb5d3a1c3f5692eb644}{generate\+All\+Moves}} (\mbox{\hyperlink{classPosition}{Position}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_adb698e757ab46fb88383e6a1f5637e15}{generate\+All\+Piece\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_ade35c903123b92bed5cc7b84e6a1314e}{Piece}}, \mbox{\hyperlink{position_8h_ab87bacfdad76e61b9412d7124be44c1c}{Color}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_a3bd7d6b31960c408a60b0e78e86c43bc}{generate\+King\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_a7e94a5aa2db64ba19b2f94c7a278e24d}{generate\+Pawn\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_aee274ca4539a2a26bf111c4f0f84aa57}{generate\+Knight\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_ad63de70e75e6ba97db1c3bdf80132198}{generate\+Bishop\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_ade2348e4474e102a2536f98185f1d76c}{generate\+Rook\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_a2a12b764422226f70ba63a89d35d29ff}{generate\+Queen\+Moves}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_aad2d5fa101d9d491afe0b8e87a3c994f}{generate\+Castling}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_afe337e5df1aea882564354b1887a9374}{generate\+Promotions}} (\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_a0ce7ba1179af2ed9e34d4b0c15fffa96}{generate\+En\+Passant}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_a8c4a41ce2d63ecef1b9777c8fbb99e24}{generate\+Pawn\+Pushes}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_af7b3ad0c89cca30c9ec9ca28b151cb50}{generate\+Pawn\+Captures}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
std\+::vector$<$ \mbox{\hyperlink{structMove}{Move}} $>$ \mbox{\hyperlink{movegeneration_8h_acee6a557493c2c695457156b1b1ad6c8}{convert\+Bit\+Board\+To\+Moves}} (Bit\+Board, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}, \mbox{\hyperlink{position_8h_ade35c903123b92bed5cc7b84e6a1314e}{Piece}})
\item 
bool \mbox{\hyperlink{movegeneration_8h_ad526c085aeedf2d45e22345c80f694ea}{in\+Check}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_ab87bacfdad76e61b9412d7124be44c1c}{Color}})
\item 
bool \mbox{\hyperlink{movegeneration_8h_a56ef0e8d2b83fad991e8b1be594bae17}{in\+Check}} (\mbox{\hyperlink{classPosition}{Position}}, \mbox{\hyperlink{position_8h_ab87bacfdad76e61b9412d7124be44c1c}{Color}}, \mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}})
\item 
void \mbox{\hyperlink{movegeneration_8h_a120ed561cd2b4d40365c90cc7356c667}{initialize\+All\+Bit\+Boards}} ()
\item 
void \mbox{\hyperlink{movegeneration_8h_a4c5897ef32d498e202cb419b314f284a}{initialize\+Knight\+Bit\+Board}} ()
\item 
void \mbox{\hyperlink{movegeneration_8h_a661ec3ed1db42d9ec13bed90bc262c97}{initialize\+King\+Bit\+Board}} ()
\end{DoxyCompactItemize}
\doxysubsection*{Variables}
\begin{DoxyCompactItemize}
\item 
Bit\+Board \mbox{\hyperlink{movegeneration_8h_ab23aa648ddc5f1d58f05459d1a887090}{knight\+Moves}} \mbox{[}64\mbox{]}
\item 
Bit\+Board \mbox{\hyperlink{movegeneration_8h_a783efeb8ede0bcede129bd577b63df83}{king\+Moves}} \mbox{[}64\mbox{]}
\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
File containing the definition of the functions used to generate all the pseudo legals moves in a given chess position, as well as the functions to evaluate checks. 

Generating pseudo legal moves means that all the moves generated follow all the rules of chess, except for pins, meaning that a move which puts its own king in check can and will also be generated. Those cases are truncated by the search algorithm. 

\doxysubsection{Function Documentation}
\mbox{\Hypertarget{movegeneration_8h_acee6a557493c2c695457156b1b1ad6c8}\label{movegeneration_8h_acee6a557493c2c695457156b1b1ad6c8}} 
\index{movegeneration.h@{movegeneration.h}!convertBitBoardToMoves@{convertBitBoardToMoves}}
\index{convertBitBoardToMoves@{convertBitBoardToMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{convertBitBoardToMoves()}{convertBitBoardToMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ convert\+Bit\+Board\+To\+Moves (\begin{DoxyParamCaption}\item[{Bit\+Board}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{,  }\item[{\mbox{\hyperlink{position_8h_ade35c903123b92bed5cc7b84e6a1314e}{Piece}}}]{ }\end{DoxyParamCaption})}

Function that vector of pseudo legals move a piece on the given square can make, given a bitboard in which all the set bits correspond to squares said piece can move to.


\begin{DoxyParams}{Parameters}
{\em bit\+Board} & The given bitboard (the i-\/th bit is set if and only if the given piece can move to the corresponding square) \\
\hline
{\em square} & The square the piece is on \\
\hline
{\em piece} & The type of piece \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_ad215d82453db4fb5d3a1c3f5692eb644}\label{movegeneration_8h_ad215d82453db4fb5d3a1c3f5692eb644}} 
\index{movegeneration.h@{movegeneration.h}!generateAllMoves@{generateAllMoves}}
\index{generateAllMoves@{generateAllMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateAllMoves()}{generateAllMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+All\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal (not worrying about pins on the king or necessarily evading checks) moves in a position.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_adb698e757ab46fb88383e6a1f5637e15}\label{movegeneration_8h_adb698e757ab46fb88383e6a1f5637e15}} 
\index{movegeneration.h@{movegeneration.h}!generateAllPieceMoves@{generateAllPieceMoves}}
\index{generateAllPieceMoves@{generateAllPieceMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateAllPieceMoves()}{generateAllPieceMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+All\+Piece\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_ade35c903123b92bed5cc7b84e6a1314e}{Piece}}}]{,  }\item[{\mbox{\hyperlink{position_8h_ab87bacfdad76e61b9412d7124be44c1c}{Color}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves all the pieces of a certain color and type (e.\+g. white rooks, black pawns) can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em piece} & The type of piece (rook, bishop, king, .etc) \\
\hline
{\em color} & The color of the pieces to generate moves for \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_ad63de70e75e6ba97db1c3bdf80132198}\label{movegeneration_8h_ad63de70e75e6ba97db1c3bdf80132198}} 
\index{movegeneration.h@{movegeneration.h}!generateBishopMoves@{generateBishopMoves}}
\index{generateBishopMoves@{generateBishopMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateBishopMoves()}{generateBishopMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Bishop\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves the bishop on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the bishop is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_aad2d5fa101d9d491afe0b8e87a3c994f}\label{movegeneration_8h_aad2d5fa101d9d491afe0b8e87a3c994f}} 
\index{movegeneration.h@{movegeneration.h}!generateCastling@{generateCastling}}
\index{generateCastling@{generateCastling}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateCastling()}{generateCastling()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Castling (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the legal (not pseudo legal) castling moves the king on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the king is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a0ce7ba1179af2ed9e34d4b0c15fffa96}\label{movegeneration_8h_a0ce7ba1179af2ed9e34d4b0c15fffa96}} 
\index{movegeneration.h@{movegeneration.h}!generateEnPassant@{generateEnPassant}}
\index{generateEnPassant@{generateEnPassant}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateEnPassant()}{generateEnPassant()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+En\+Passant (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates the pseudo legal enpassant capture the pawn on the given square can make (if there is no capture possible, returns the empty list).


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the pawn is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a3bd7d6b31960c408a60b0e78e86c43bc}\label{movegeneration_8h_a3bd7d6b31960c408a60b0e78e86c43bc}} 
\index{movegeneration.h@{movegeneration.h}!generateKingMoves@{generateKingMoves}}
\index{generateKingMoves@{generateKingMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateKingMoves()}{generateKingMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+King\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves the king on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the king is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_aee274ca4539a2a26bf111c4f0f84aa57}\label{movegeneration_8h_aee274ca4539a2a26bf111c4f0f84aa57}} 
\index{movegeneration.h@{movegeneration.h}!generateKnightMoves@{generateKnightMoves}}
\index{generateKnightMoves@{generateKnightMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateKnightMoves()}{generateKnightMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Knight\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves the knight on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the knight is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_af7b3ad0c89cca30c9ec9ca28b151cb50}\label{movegeneration_8h_af7b3ad0c89cca30c9ec9ca28b151cb50}} 
\index{movegeneration.h@{movegeneration.h}!generatePawnCaptures@{generatePawnCaptures}}
\index{generatePawnCaptures@{generatePawnCaptures}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generatePawnCaptures()}{generatePawnCaptures()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Pawn\+Captures (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates the pseudo legal captures the pawn on the given square can make .


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the pawn is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a7e94a5aa2db64ba19b2f94c7a278e24d}\label{movegeneration_8h_a7e94a5aa2db64ba19b2f94c7a278e24d}} 
\index{movegeneration.h@{movegeneration.h}!generatePawnMoves@{generatePawnMoves}}
\index{generatePawnMoves@{generatePawnMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generatePawnMoves()}{generatePawnMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Pawn\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves the pawn on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the pawn is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a8c4a41ce2d63ecef1b9777c8fbb99e24}\label{movegeneration_8h_a8c4a41ce2d63ecef1b9777c8fbb99e24}} 
\index{movegeneration.h@{movegeneration.h}!generatePawnPushes@{generatePawnPushes}}
\index{generatePawnPushes@{generatePawnPushes}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generatePawnPushes()}{generatePawnPushes()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Pawn\+Pushes (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates the pseudo legal pushes the pawn on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the pawn is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_afe337e5df1aea882564354b1887a9374}\label{movegeneration_8h_afe337e5df1aea882564354b1887a9374}} 
\index{movegeneration.h@{movegeneration.h}!generatePromotions@{generatePromotions}}
\index{generatePromotions@{generatePromotions}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generatePromotions()}{generatePromotions()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Promotions (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal promotions the pawn can be make going from the given squares.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em origin} & The square the pawn is on \\
\hline
{\em destiny} & The square the pawn is going to promote on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a2a12b764422226f70ba63a89d35d29ff}\label{movegeneration_8h_a2a12b764422226f70ba63a89d35d29ff}} 
\index{movegeneration.h@{movegeneration.h}!generateQueenMoves@{generateQueenMoves}}
\index{generateQueenMoves@{generateQueenMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateQueenMoves()}{generateQueenMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Queen\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves the queen on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the queen is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_ade2348e4474e102a2536f98185f1d76c}\label{movegeneration_8h_ade2348e4474e102a2536f98185f1d76c}} 
\index{movegeneration.h@{movegeneration.h}!generateRookMoves@{generateRookMoves}}
\index{generateRookMoves@{generateRookMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{generateRookMoves()}{generateRookMoves()}}
{\footnotesize\ttfamily std\+::vector$<$\mbox{\hyperlink{structMove}{Move}}$>$ generate\+Rook\+Moves (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that generates all the pseudo legal moves the rook on the given square can make.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em square} & The square the rook is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The vector containing the requested moves 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_ad526c085aeedf2d45e22345c80f694ea}\label{movegeneration_8h_ad526c085aeedf2d45e22345c80f694ea}} 
\index{movegeneration.h@{movegeneration.h}!inCheck@{inCheck}}
\index{inCheck@{inCheck}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{inCheck()}{inCheck()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily bool in\+Check (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_ab87bacfdad76e61b9412d7124be44c1c}{Color}}}]{ }\end{DoxyParamCaption})}

Function that checks whether the king of the given color is in check or not


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em color} & The color of the king \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Whether the king of the given color is in check or not 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a56ef0e8d2b83fad991e8b1be594bae17}\label{movegeneration_8h_a56ef0e8d2b83fad991e8b1be594bae17}} 
\index{movegeneration.h@{movegeneration.h}!inCheck@{inCheck}}
\index{inCheck@{inCheck}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{inCheck()}{inCheck()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily bool in\+Check (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{classPosition}{Position}}}]{,  }\item[{\mbox{\hyperlink{position_8h_ab87bacfdad76e61b9412d7124be44c1c}{Color}}}]{,  }\item[{\mbox{\hyperlink{position_8h_aea36cb320045b9a24ec74b798982e5fc}{Square}}}]{ }\end{DoxyParamCaption})}

Function that checks whether the king of the given color is in check or not, supposing it sits on the given square.


\begin{DoxyParams}{Parameters}
{\em position} & The given position \\
\hline
{\em color} & The color of the king \\
\hline
{\em square} & The square the king is on \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
Whether the king of the given color is in check or not 
\end{DoxyReturn}
\mbox{\Hypertarget{movegeneration_8h_a120ed561cd2b4d40365c90cc7356c667}\label{movegeneration_8h_a120ed561cd2b4d40365c90cc7356c667}} 
\index{movegeneration.h@{movegeneration.h}!initializeAllBitBoards@{initializeAllBitBoards}}
\index{initializeAllBitBoards@{initializeAllBitBoards}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{initializeAllBitBoards()}{initializeAllBitBoards()}}
{\footnotesize\ttfamily void initialize\+All\+Bit\+Boards (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Function that initializes the knights and king bitboards \mbox{\Hypertarget{movegeneration_8h_a661ec3ed1db42d9ec13bed90bc262c97}\label{movegeneration_8h_a661ec3ed1db42d9ec13bed90bc262c97}} 
\index{movegeneration.h@{movegeneration.h}!initializeKingBitBoard@{initializeKingBitBoard}}
\index{initializeKingBitBoard@{initializeKingBitBoard}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{initializeKingBitBoard()}{initializeKingBitBoard()}}
{\footnotesize\ttfamily void initialize\+King\+Bit\+Board (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Function that initializes the kings bitboards \mbox{\Hypertarget{movegeneration_8h_a4c5897ef32d498e202cb419b314f284a}\label{movegeneration_8h_a4c5897ef32d498e202cb419b314f284a}} 
\index{movegeneration.h@{movegeneration.h}!initializeKnightBitBoard@{initializeKnightBitBoard}}
\index{initializeKnightBitBoard@{initializeKnightBitBoard}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{initializeKnightBitBoard()}{initializeKnightBitBoard()}}
{\footnotesize\ttfamily void initialize\+Knight\+Bit\+Board (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})}

Function that initializes the knight bitboards 

\doxysubsection{Variable Documentation}
\mbox{\Hypertarget{movegeneration_8h_a783efeb8ede0bcede129bd577b63df83}\label{movegeneration_8h_a783efeb8ede0bcede129bd577b63df83}} 
\index{movegeneration.h@{movegeneration.h}!kingMoves@{kingMoves}}
\index{kingMoves@{kingMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{kingMoves}{kingMoves}}
{\footnotesize\ttfamily Bit\+Board king\+Moves\mbox{[}64\mbox{]}}

The bitboards used to compute the movements of kings \mbox{\Hypertarget{movegeneration_8h_ab23aa648ddc5f1d58f05459d1a887090}\label{movegeneration_8h_ab23aa648ddc5f1d58f05459d1a887090}} 
\index{movegeneration.h@{movegeneration.h}!knightMoves@{knightMoves}}
\index{knightMoves@{knightMoves}!movegeneration.h@{movegeneration.h}}
\doxysubsubsection{\texorpdfstring{knightMoves}{knightMoves}}
{\footnotesize\ttfamily Bit\+Board knight\+Moves\mbox{[}64\mbox{]}}

The bitboards used to compute the movements of knights 